@using Dnet.Blazor.Components.DatePicker.Infrastructure.Models
@using Dnet.Blazor.Components.DatePicker.Infrastructure.Services
@using Dnet.Blazor.Components.Form
@using Dnet.Blazor.Components.Overlay.Infrastructure.Enums
@using Dnet.Blazor.Components.Overlay.Infrastructure.Interfaces
@using Dnet.Blazor.Components.Overlay.Infrastructure.Models
@using Dnet.Blazor.Components.Overlay.Infrastructure.Services
@using Dnet.Blazor.Infrastructure.Enums
@using Dnet.Blazor.Infrastructure.Services.CssBuilder
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Forms
@using System.Diagnostics.CodeAnalysis
@using System.Globalization

@inherits DnetInputBase<string>

@implements IDisposable

@inject IJSRuntime JSRuntime

@inject IOverlayService OverlayService

<input @ref="__inputReference" @bind="CurrentValue" @bind:event="oninput" disabled="@Disabled" class="@_inputTextClass"
       @onfocusin="@(() => ToggleMenu())"
       @onfocus="@(() => Focus())"
       @onblur="@(() => Blur())"
       @onkeydown="HandleKeyDown"
       placeholder="@PlaceHolder" />


@code {

    [CascadingParameter]
    private FormFieldCascadingValues? _formFieldCascadingValues { get; set; }

    [Parameter]
    public EventCallback<string> OnError { get; set; }

    [DisallowNull]
    public ElementReference __inputReference { get; protected set; }

    [Parameter]
    public bool Disabled { get; set; } = false;

    [Parameter]
    public string Format { get; set; } = $"yyyy/MM/dd";

    [Parameter]
    public string[] Formats { get; set; } = new[] { "yyyy/MM/dd", "yyyy/M/dd", "yyyy/MM/d" };

    [Parameter]
    public DateTime? MaxDayValue { get; set; }

    [Parameter]
    public DateTime? MinDayValue { get; set; }

    [Parameter]
    public DateTime? FirstDayToShow { get; set; }

    [Parameter]
    public Func<CalendarDay, bool>? DatepickerFilter { get; set; }

    [Parameter]
    public EventCallback<CalendarDay> OnDaySelected { get; set; }

    [Parameter]
    public string BorderRadius { get; set; } = "5px";

    [Parameter]
    public string MarginTop { get; set; } = "5px";

    [Parameter]
    public string? PlaceHolder { get; set; }

    [Parameter]
    public bool ShowInternalErrors { get; set; } = true;


    private bool _isOpen = false;

    private OverlayReference? _menuReference;

    private DatePickerService? _datePickerService;

    private CalendarDay _selectedDay = new CalendarDay();

    private bool _hasFocus { get; set; }

    private bool _hasErrors { get; set; }

    private IFormEventService? _formEventService { get; set; }

    private bool _previousDisabled;

    private string _inputTextClass =>
    new CssBuilder("mat-input-element")
    .AddClass(CssClass)
    .Build();

    private ValidationMessageStore? _messageStore;


    protected override void OnInitialized()
    {
        if (!string.IsNullOrEmpty(Format) && !Formats.Any()) Formats[0] = Format;

        _formEventService = _formFieldCascadingValues.FormEventService;

        _datePickerService = new DatePickerService();

        if (EditContext is not null)
        {
            _hasErrors = EditContext.GetValidationMessages(FieldIdentifier).Any();

            if (_formEventService is not null) _formEventService.RaiseError(_hasErrors && EditContext.IsModified(FieldIdentifier));
        }

        if (!string.IsNullOrEmpty(CurrentValue))
        {
            _hasFocus = true;

            if (_formEventService is not null) _formEventService.RaiseFocus(_hasFocus);
        }

        _datePickerService.OnDaySelected += DaySelectedAsync;

        if (_formEventService is not null)
        {
            _formEventService.RaiseCurrentValue(CurrentValueAsString);

            _formEventService.OnClearContent += ClearInput;

            _formEventService.OnSufixContentClicked += SufixContentClicked;

            _formEventService.RaiseDisabledEvent(Disabled);
        }

        _previousDisabled = Disabled;

        if (!ShowInternalErrors) return;

        if (EditContext is not null)
        {
            _messageStore = new(EditContext);

            EditContext.OnFieldChanged += async (data, eventArgs) =>
            {
                _messageStore.Clear(FieldIdentifier);

                DateTime curDay;
                
                if (!DateTime.TryParseExact(CurrentValue, Formats, CultureInfo.InvariantCulture, DateTimeStyles.None, out curDay))
                {
                    await OnError.InvokeAsync($"Invalid Date format. valid formats: {string.Join(", ", Formats)}");

                    _messageStore.Add(FieldIdentifier, $"Invalid Date format. valid formats: {string.Join(", ", Formats)}");
                }
                else
                {
                    if (_selectedDay.DayNumber != curDay.Day ||
                        _selectedDay.Month != curDay.Month || 
                        _selectedDay.Year != curDay.Year)
                    {
                        var newDay = new CalendarDay();
                        newDay.DayNumber = curDay.Day;
                        newDay.Month = curDay.Month;
                        newDay.Year = curDay.Year;
                    
                        await HandleDaySelectedAsync(newDay);
                    }
                }

                if (_formEventService is not null) _formEventService.RaiseCurrentValue(CurrentValueAsString);
            };
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (_previousDisabled != Disabled)
        {
            _previousDisabled = Disabled;

            OnDisabledChanged();
        }
    }

    // private void HandleKeyDown(KeyboardEventArgs e)
    // {
    //     if (e.Key == "Enter" || e.Key == "Tab")
    //     {
    //         DetachMenu();
    //     }
    // }

    private async void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" || e.Key == "Tab")
        {
            if (DateTime.TryParseExact(CurrentValue, Formats, CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime parsedDate))
            {
                var day = GetCalendarDay(parsedDate);

                _selectedDay = day;

                var value = "";

                if (day.DayNumber != 0 && day.Month != 0 && day.Year != 0)
                {
                    day.Date = new DateTime(day.Year, day.Month, day.DayNumber);
                    value = day.Date.ToString(Formats[0]);
                    day.FormattedDate = value;
                }
                else
                {
                    CurrentValue = string.Empty;
                }

                _hasFocus = !string.IsNullOrEmpty(CurrentValue);

                if (EditContext != null)
                {
                    _hasErrors = EditContext.GetValidationMessages(FieldIdentifier).Any();

                    if (_formEventService != null) _formEventService.RaiseError(_hasErrors && EditContext.IsModified(FieldIdentifier));
                }

                if (_formEventService != null) _formEventService.RaiseFocus(_hasFocus);

                if (_formEventService is not null) _formEventService.RaiseCurrentValue(CurrentValueAsString);

                await OnDaySelected.InvokeAsync(_selectedDay);

                if (_isOpen) DetachMenu();

                StateHasChanged();
            }
            else
            {
                if (OnError.HasDelegate)
                {
                    await OnError.InvokeAsync($"Invalid Date format. Valid formats: {string.Join(", ", Formats)}");
                }
            }
        }
    }

    private async void DaySelectedAsync(CalendarDay day)
    {
        await HandleDaySelectedAsync(day);
    }

    protected override bool TryParseValueFromString(string value, out string result, out string validationErrorMessage)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            result = "";
            validationErrorMessage = null;
            return true;
        }

        if (DateTime.TryParseExact(value, Formats, CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime parsedDate))
        {
            result = parsedDate.ToString(Formats[0]);
            validationErrorMessage = null;
            return true;
        }
        else
        {
            result = null;
            validationErrorMessage = $"Fecha inválida. Formatos aceptados: {string.Join(", ", Formats)}";
            return false;
        }
    }

    private void ToggleMenu()
    {
        if (Disabled) return;

        if (!_isOpen)
        {
            AttachMenu();
            _isOpen = true;
        }
        else
        {
            DetachMenu();
        }
    }

    private void AttachMenu()
    {
        var positions = new List<ConnectedPosition>
        {
            new ConnectedPosition
            {
                OriginX = HorizontalConnectionPos.Start,
                OriginY = VerticalConnectionPos.Bottom,
                OverlayX = HorizontalConnectionPos.Start,
                OverlayY = VerticalConnectionPos.Top
                },
                new ConnectedPosition
                {
                OriginX = HorizontalConnectionPos.Start,
                OriginY = VerticalConnectionPos.Top,
                OverlayX = HorizontalConnectionPos.Start,
                OverlayY = VerticalConnectionPos.Bottom
                },
                new ConnectedPosition
                {
                OriginX = HorizontalConnectionPos.End,
                OriginY = VerticalConnectionPos.Bottom,
                OverlayX = HorizontalConnectionPos.End,
                OverlayY = VerticalConnectionPos.Top
                },
                new ConnectedPosition
                {
                OriginX = HorizontalConnectionPos.End,
                OriginY = VerticalConnectionPos.Top,
                OverlayX = HorizontalConnectionPos.End,
                OverlayY = VerticalConnectionPos.Bottom
            }
        };

        var flexibleConnectedPositionStrategyBuilder = new FlexibleConnectedPositionStrategyBuilder()
        .WithLockedPosition()
        .WithViewportMargin(8)
        .SetOrigin(_formFieldCascadingValues.FormField)
        .WithFlexibleDimensions(false)
        .WithPositions(positions);

        var connectedPanelConfig = new OverlayConfig()
            {
                HasBackdrop = true,
                HasTransparentBackdrop = true,
                PositionStrategy = PositionStrategy.FlexibleConnectedTo,
                FlexibleConnectedPositionStrategyBuilder = flexibleConnectedPositionStrategyBuilder,
                MarginTop = MarginTop,
                ComponentType = ComponentType.DatePicker
            };

        var selectedDay = DateTime.Now;

        if (!string.IsNullOrEmpty(CurrentValue))
        {
            if (DateTime.TryParseExact(CurrentValue, Formats, CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime
            parsedDate))
            {
                selectedDay = parsedDate;
            }
        }

        _selectedDay.Year = selectedDay.Year;
        _selectedDay.Month = selectedDay.Month;
        _selectedDay.DayNumber = !string.IsNullOrEmpty(CurrentValue) ? selectedDay.Day : -1;

        var menuContent = new RenderFragment(x =>
        {
            x.OpenComponent(0, typeof(DnetDatePickerPanel));
            x.AddAttribute(1, "DatePickerService", _datePickerService);
            x.AddAttribute(2, "SelectedDay", _selectedDay);
            x.AddAttribute(3, "MaxDayValue", MaxDayValue);
            x.AddAttribute(4, "MinDayValue", MinDayValue);
            x.AddAttribute(5, "DatepickerFilter", DatepickerFilter);
            x.AddAttribute(6, "FirstDayToShow", FirstDayToShow);
            x.AddAttribute(7, "BorderRadius", BorderRadius);
            x.CloseComponent();
        });

        _menuReference = OverlayService.Attach(menuContent, connectedPanelConfig);

        _menuReference.Close += CloseDialog;
    }

    private void DetachMenu()
    {
        if (_menuReference != null)
        {
            _isOpen = false;

            var result = new OverlayResult
                {
                    OverlayReferenceId = _menuReference.GetOverlayReferenceId(),
                    CloseReason = CloseReason.Cancel
                };

            OverlayService.Detach(result);
            _menuReference = null;
        }
    }

    void CloseDialog(OverlayResult overlayDataResult)
    {
        _isOpen = false;
    }

    private async Task<string> UpdateTextValue(string dayValue)
    {
        DateTime selectedDay;
        CalendarDay day = default!;
        var currentValue = "";

        if (!string.IsNullOrEmpty(dayValue))
        {
            if (DateTime.TryParseExact(dayValue, Formats, CultureInfo.InvariantCulture, DateTimeStyles.None, out selectedDay))
            {
                day = GetCalendarDay(selectedDay);
                currentValue = !EvaluateMinMaxDates(day) ? dayValue : "";

                if (!string.IsNullOrEmpty(currentValue))
                {
                    day.Date = new DateTime(day.Year, day.Month, day.DayNumber);
                    day.FormattedDate = day.Date.ToString(Formats[0]);

                    _hasFocus = true;

                    if (_formEventService is not null)
                        _formEventService.RaiseFocus(_hasFocus);

                    _selectedDay = day;
                }
                else
                {
                    _hasFocus = false;

                    if (_formEventService is not null)
                        _formEventService.RaiseFocus(_hasFocus);
                }
            }
            else
            {
                currentValue = "";
                if (OnError.HasDelegate)
                {
                    await OnError.InvokeAsync($"Invalid Date format. valid formats: {string.Join(", ", Formats)}");
                }
            }
        }

        if (EditContext != null)
        {
            _hasErrors = EditContext.GetValidationMessages(FieldIdentifier).Any();

            if (_formEventService is not null)
                _formEventService.RaiseError(_hasErrors && EditContext.IsModified(FieldIdentifier));
        }

        return currentValue;
    }

    private async Task HandleDaySelectedAsync(CalendarDay day)
    {
        _selectedDay = day;

        var value = "";

        if (day.DayNumber != 0 && day.Month != 0 && day.Year != 0)
        {
            day.Date = new DateTime(day.Year, day.Month, day.DayNumber);
            value = day.Date.ToString(Formats[0]);
            day.FormattedDate = value;

            CurrentValue = await UpdateTextValue(value.ToString());
        }
        else
        {
            CurrentValue = string.Empty;
        }

        _hasFocus = !string.IsNullOrEmpty(CurrentValue);

        if (EditContext != null)
        {
            _hasErrors = EditContext.GetValidationMessages(FieldIdentifier).Any();

            if (_formEventService != null) _formEventService.RaiseError(_hasErrors && EditContext.IsModified(FieldIdentifier));
        }

        if (_formEventService != null) _formEventService.RaiseFocus(_hasFocus);

        if (_formEventService is not null) _formEventService.RaiseCurrentValue(CurrentValueAsString);

        await OnDaySelected.InvokeAsync(_selectedDay);

        if (_isOpen) DetachMenu();

        StateHasChanged();
    }

    private bool EvaluateMinMaxDates(CalendarDay day)
    {
        CalendarDay minCalendarDay = null;
        CalendarDay maxCalendarDay = null;

        if (MinDayValue != null) minCalendarDay = GetCalendarDay((DateTime)MinDayValue);

        if (MaxDayValue != null) maxCalendarDay = GetCalendarDay((DateTime)MaxDayValue);

        var minEvaluation = false;
        var maxEvaluation = false;
        var filterEvaluation = false;

        if (minCalendarDay != null)
            minEvaluation = (day.DayNumber < minCalendarDay.DayNumber && day.Year == minCalendarDay.Year && day.Month ==
            minCalendarDay.Month) ||
            day.Year < minCalendarDay.Year ||
            (day.Month < minCalendarDay.Month && day.Year == minCalendarDay.Year);

        if (maxCalendarDay != null)
            maxEvaluation = (day.DayNumber > maxCalendarDay.DayNumber && day.Year == maxCalendarDay.Year && day.Month ==
            maxCalendarDay.Month) ||
            day.Year > maxCalendarDay.Year ||
            (day.Month > maxCalendarDay.Month && day.Year == maxCalendarDay.Year);

        if (DatepickerFilter != null)
            filterEvaluation = DatepickerFilter(day);

        var result = minEvaluation || maxEvaluation || filterEvaluation;

        return result;
    }

    private CalendarDay GetCalendarDay(DateTime date)
    {
        var calendarDay = new CalendarDay
            {
                DayNumber = date.Day,
                DayName = date.DayOfWeek.ToString(),
                Year = date.Year,
                Month = date.Month,
                DayIndex = (int)date.DayOfWeek
            };

        return calendarDay;
    }

    private void Focus()
    {
        _hasFocus = true;

        if (_formEventService is not null) _formEventService.RaiseFocus(_hasFocus);

        StateHasChanged();
    }

    private void Blur()
    {
        if (string.IsNullOrEmpty(CurrentValue))
        {
            _hasFocus = false;

            if (_formEventService is not null) _formEventService.RaiseFocus(_hasFocus);
        }

        StateHasChanged();
    }

    private void HandleOnValidationStateChanged(object sender, FieldChangedEventArgs? args)
    {
        if (EditContext is not null)
        {
            _hasErrors = EditContext.GetValidationMessages(FieldIdentifier).Any();

            if (_formEventService is not null) _formEventService.RaiseError(_hasErrors && EditContext.IsModified(FieldIdentifier));
        }
    }

    private async void ClearInput()
    {
        var day = new CalendarDay();

        await HandleDaySelectedAsync(day);

        if (_formEventService is not null) _formEventService.RaiseCurrentValue(CurrentValueAsString);

        StateHasChanged();
    }

    private void SufixContentClicked()
    {
        ToggleMenu();
    }

    private void OnDisabledChanged()
    {
        _formEventService?.RaiseDisabledEvent(Disabled);

        StateHasChanged();
    }

    public void Dispose()
    {
        _isOpen = false;

        if (_menuReference != null) _menuReference.Close -= CloseDialog;

        if (_datePickerService != null) _datePickerService.OnDaySelected -= DaySelectedAsync;

        if (_formEventService is not null)
        {
            _formEventService.OnClearContent -= ClearInput;

            _formEventService.OnSufixContentClicked -= SufixContentClicked;
        }
    }
}