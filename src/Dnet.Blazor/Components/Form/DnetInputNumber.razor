@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using System.Diagnostics.CodeAnalysis
@using System.Globalization
@using Dnet.Blazor.Infrastructure.Services.CssBuilder
@using System.Timers

@typeparam TValue

@inherits Dnet.Blazor.Infrastructure.Forms.DnetInputBase<TValue>

@implements IDisposable

@inject IJSRuntime JSRuntime

@if (!ImmediateResponse)
{
    <input @ref="__inputReference "
           @attributes="AdditionalAttributes"
           class="@_inputTextClass"
           value="CurrentValueAsString"
           @onchange="HandleChange"
           @onfocus=@(() => Focus())
           @onblur=@(() => Blur())
           placeholder="@PlaceHolder"
           disabled="@Disabled"
           type="number"
           style="@(Convert.ToString(_styles, CultureInfo.InvariantCulture))" 
           min="@Min" 
           max="@Max" 
           step="@Step"
           id="@Id" 
           />
}
else
{
    <input @ref="__inputReference"
           @attributes="AdditionalAttributes"
           class="@_inputTextClass"
           @bind="CurrentValueAsString"
           @bind:event="oninput"
           @onkeyup="ResetTimer"
           @onkeyup:stopPropagation="true"
           @onkeyup:preventDefault="true"
           @onfocus=@(() => Focus())
           @onblur=@(() => Blur())
           placeholder="@PlaceHolder"
           disabled="@Disabled"
           type="number"
           style="@(Convert.ToString(_styles, CultureInfo.InvariantCulture))"
           min="@Min"
           max="@Max"
           step="@Step"
           id="@Id"
           />
}


@code {

    [CascadingParameter]
    private FormFieldCascadingValues? _formFieldCascadingValues { get; set; }

    [Parameter]
    public EventCallback<bool> OnClearInput { get; set; }

    [Parameter]
    public EventCallback<string> OnStopTyping { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public bool ImmediateResponse { get; set; } = false;

    [Parameter] 
    public string ParsingErrorMessage { get; set; } = "The {0} field must be a number.";

    [DisallowNull]
    public ElementReference? __inputReference { get; protected set; }

    [Parameter]
    public int DebounceTime { get; set; } = 300;

    [Parameter]
    public bool IsRequired { get; set; }

    [Parameter]
    public string? PlaceHolder { get; set; }

    [Parameter]
    public string Id { get; set; } = string.Empty;

    [Parameter]
    public string Min { get; set; } = string.Empty;

    [Parameter]
    public string Max { get; set; } = string.Empty;

    [Parameter]
    public string Step { get; set; } = "any";


    private bool _hasFocus { get; set; }

    private bool _hasErrors { get; set; }

    private Timer? _debounceTimer;

    private IFormEventService? _formEventService { get; set; }

    private string _inputTextClass =>
                new CssBuilder("mat-input-element")
                    .AddClass(CssClass)
                .Build();

    private string? _stepAttributeValue { get; set; }

    private static string GetStepAttributeValue()
    {
        // Unwrap Nullable<T>, because InputBase already deals with the Nullable aspect
        // of it for us. We will only get asked to parse the T for nonempty inputs.
        var targetType = Nullable.GetUnderlyingType(typeof(TValue)) ?? typeof(TValue);
        if (targetType == typeof(int) ||
            targetType == typeof(long) ||
            targetType == typeof(short) ||
            targetType == typeof(float) ||
            targetType == typeof(double) ||
            targetType == typeof(decimal) ||
            targetType == typeof(uint) ||
            targetType == typeof(ushort) ||
            targetType == typeof(UInt64))
        {
            return "any";
        }
        else
        {
            throw new InvalidOperationException($"The type '{targetType}' is not a supported numeric type.");
        }
    }

    private string? _styles { get; set; }

    private bool _previousDisabled;


    protected override void OnInitialized()
    {
        _styles = new StyleBuilder("margin-right", "10px")
                  .Build();

        _formEventService = _formFieldCascadingValues?.FormEventService;

        if (ImmediateResponse)
        {
            _debounceTimer = new Timer(DebounceTime);

            _debounceTimer.Elapsed += HandleChangeDebouncedDiscard;

            _debounceTimer.AutoReset = false;
        }

        _stepAttributeValue = GetStepAttributeValue();

        if (!string.IsNullOrEmpty(CurrentValueAsString))
        {
            _hasFocus = true;

            if (_formEventService is not null) _formEventService.RaiseFocus(_hasFocus);
        }

        if (_formEventService is not null) _formEventService.RaiseCurrentValue(CurrentValueAsString);

        if (_formEventService is not null) _formEventService.OnClearContent += HandleClearContent;

        if (_formEventService is not null) _formEventService.RaiseDisabledEvent(Disabled);

        if (EditContext is not null)
        {
            EditContext.OnFieldChanged += HandleOnValidationStateChanged;
        }

        _previousDisabled = Disabled;
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (_previousDisabled != Disabled)
        {
            _previousDisabled = Disabled;

            OnDisabledChanged();
        }
    }

    public void HandleChangeDebouncedDiscard(Object? source, ElapsedEventArgs e)
    {
        _ = HandleChangeDebounced(e);
    }

    private async Task HandleChangeDebounced(ElapsedEventArgs e)
    {
        await InvokeAsync(async () =>
        {
            if (_formEventService is not null) _formEventService.RaiseCurrentValue(CurrentValueAsString);

            await OnStopTyping.InvokeAsync(CurrentValueAsString);
        });
    }

    private void ResetTimer(KeyboardEventArgs data)
    {
        _debounceTimer?.Stop();

        _debounceTimer?.Start();
    }

    private void HandleChange(ChangeEventArgs e)
    {
        CurrentValueAsString = e.Value?.ToString();

        if (_formEventService is not null) _formEventService.RaiseCurrentValue(CurrentValueAsString);
    }

    private void Focus()
    {
        _hasFocus = true;

        if (_formEventService is not null) _formEventService.RaiseFocus(_hasFocus);

        StateHasChanged();
    }

    private void Blur()
    {
        if (string.IsNullOrEmpty(CurrentValueAsString))
        {
            _hasFocus = false;

            if (_formEventService is not null) _formEventService.RaiseFocus(_hasFocus);
        }

        if (EditContext is not null)
        {
            _hasErrors = EditContext.GetValidationMessages(FieldIdentifier).Any();

            if (_formEventService is not null) _formEventService.RaiseError(_hasErrors && EditContext.IsModified(FieldIdentifier));
        }

        StateHasChanged();
    }

    private void HandleOnValidationStateChanged(object? sender, FieldChangedEventArgs? args)
    {
        if (EditContext is not null)
        {
            _hasErrors = EditContext.GetValidationMessages(FieldIdentifier).Any();

            if (_formEventService is not null) _formEventService.RaiseError(_hasErrors && EditContext.IsModified(FieldIdentifier));
        }
    }

    protected override bool TryParseValueFromString(string? value, [MaybeNullWhen(false)] out TValue result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
        if (BindConverter.TryConvertTo<TValue>(value, CultureInfo.InvariantCulture, out result))
        {
            validationErrorMessage = null;
            return true;
        }
        else
        {
            validationErrorMessage = string.Format(CultureInfo.InvariantCulture, ParsingErrorMessage, DisplayName ?? FieldIdentifier.FieldName);
            return false;
        }
    }

    protected override string? FormatValueAsString(TValue? value)
    {
        // Avoiding a cast to IFormattable to avoid boxing.
        switch (value)
        {
            case null:
                return null;

            case int @int:
                return BindConverter.FormatValue(@int, CultureInfo.InvariantCulture);

            case long @long:
                return BindConverter.FormatValue(@long, CultureInfo.InvariantCulture);

            case short @short:
                return BindConverter.FormatValue(@short, CultureInfo.InvariantCulture);

            case float @float:
                return BindConverter.FormatValue(@float, CultureInfo.InvariantCulture);

            case double @double:
                return BindConverter.FormatValue(@double, CultureInfo.InvariantCulture);

            case decimal @decimal:
                return BindConverter.FormatValue(@decimal, CultureInfo.InvariantCulture);

            case uint @uint:
                return @uint.ToString(CultureInfo.InvariantCulture);

            case ushort @ushort:
                return @ushort.ToString(CultureInfo.InvariantCulture);

            case UInt64 @uInt64:
                return @uInt64.ToString(CultureInfo.InvariantCulture);

            default:
                throw new InvalidOperationException($"Unsupported type {value.GetType()}");
        }
    }

    private async void HandleClearContent()
    {
        CurrentValue = default;

        if (EditContext is not null)
        {
            EditContext?.NotifyFieldChanged(FieldIdentifier);

            if (EditContext is not null) _hasErrors = EditContext.GetValidationMessages(FieldIdentifier).Any();

            if (_formEventService is not null && EditContext is not null) _formEventService.RaiseError(_hasErrors && EditContext.IsModified(FieldIdentifier));
        }

        await ValueChanged.InvokeAsync(Value);

        await OnClearInput.InvokeAsync(true);

        StateHasChanged();
    }

    private void OnDisabledChanged()
    {
        _formEventService?.RaiseDisabledEvent(Disabled);

        StateHasChanged();
    }

    public void Dispose()
    {
        if (ImmediateResponse && _debounceTimer is not null) _debounceTimer.Elapsed -= HandleChangeDebouncedDiscard;

        if (_formEventService is not null) _formEventService.OnClearContent -= HandleClearContent;

        if (EditContext != null) EditContext.OnFieldChanged -= HandleOnValidationStateChanged;
    }
}
