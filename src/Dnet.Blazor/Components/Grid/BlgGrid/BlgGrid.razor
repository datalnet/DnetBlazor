@using System.Diagnostics
@using System.Threading
@using Dnet.Blazor.Components.Grid.Infrastructure.Entities
@using Dnet.Blazor.Components.Grid.Infrastructure.Enums
@using Dnet.Blazor.Components.Grid.Infrastructure.Interfaces
@using Dnet.Blazor.Components.Grid.Infrastructure.Models
@using Dnet.Blazor.Components.Grid.Infrastructure.Services
@using Dnet.Blazor.Components.Grid.Virtualize
@using Dnet.Blazor.Components.Grid.BlgBody
@using Dnet.Blazor.Components.Grid.BlgHeader
@using Dnet.Blazor.Infrastructure.Models.SearchModels.FilterModels
@using Microsoft.Extensions.DependencyInjection
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Web
@using Dnet.Blazor.Components.Paginator
@using Dnet.Blazor.Infrastructure.Models.SearchModels;

@inject ISorting<TItem> SortingService
@inject IFiltering<TItem> FilteringService
@inject IGrouping<TItem> GroupingService
@inject IPaginator PaginatorService
@inject IAdvancedFiltering<TItem> AdvancedFilteringService
@inject IBlGridInterop<TItem> BlGridInterop

@inject IJSRuntime JSRuntime

@implements IVirtualizeJsCallbacks
@implements IAsyncDisposable

@inherits OwningComponentBase

@typeparam TItem

<div @ref="_eGridContainer"
     class="@_gridClasses"
     style="height: calc(100% - 0px);"
     @onmouseup="() => MouseUp()">
    @{
        var orderedGridColumns = _gridColumns.OrderBy(p => p.ColumnOrder).ToList();

        var notPinnedColumns = orderedGridColumns.Where(e => e.Pinned == Pinned.None && !e.Hide).Select(p => p).ToList();

        var pinnedColumnsLeft = orderedGridColumns.Where(e => e.Pinned == Pinned.Left && !e.Hide).Select(p => p).ToList();

        var pinnedColumnsRight = orderedGridColumns.Where(e => e.Pinned == Pinned.Right && !e.Hide).Select(p => p).ToList();

        var checkWidth = GridOptions.CheckboxSelectionPinned ? 40 : 0;

        var pinnedColumnsLeftWidth = pinnedColumnsLeft.Select(p => p.Width).Sum();

        pinnedColumnsLeftWidth = pinnedColumnsLeftWidth + checkWidth;

        var pinnedColumnsRightWidth = pinnedColumnsRight.Select(p => p.Width).Sum();

        var leftSpacerWith = pinnedColumnsLeftWidth;

        var rightSpacerWith = pinnedColumnsRightWidth + GridOptions.ScrollWidth;

        var numberOfRows = GridOptions.PaginationPageSize;

        if (_refreshException != null)
        {
            var oldRefreshException = _refreshException;
            _refreshException = null;

            throw oldRefreshException;
        }

        <div class="blg-root-wrapper" style="height: calc(100% - 0px);">
            <div class="blg-body-wrapper" style="height: calc(100% - @(GridOptions.SuppressPaginationPanel ? $"{GridOptions.ScrollWidth + 10}px" : $"{PaginatorHeight}px"));">
                <div class="blg-root" style="height: calc(100% - 0px);">
                    <div class="blg-header">
                        @if (pinnedColumnsLeft.Any())
                        {
                            var gridTemplateColumnsLeft1 = "";

                            if (GridOptions.CheckboxSelectionColumn && GridOptions.CheckboxSelectionPinned)
                            {
                                gridTemplateColumnsLeft1 = "40px";
                            }

                            foreach (var column in pinnedColumnsLeft)
                            {
                                var columnStyle = $"{column.Width}px";

                                gridTemplateColumnsLeft1 = gridTemplateColumnsLeft1 + " " + columnStyle;
                            }

                            var gridTemplateRowsLeft1 = $"{GridOptions.HeaderHeight}px";

                            if (!GridOptions.SuppressFilterRow)
                            {
                                gridTemplateRowsLeft1 = gridTemplateRowsLeft1 + " " + $"40px";
                            }

                            <div class="blg-pinned-left-header"
                                 role="presentation"
                                 style="display: grid; grid-template-rows:@gridTemplateRowsLeft1; grid-template-columns:@gridTemplateColumnsLeft1">
                                <BlgHeader GridColumns="pinnedColumnsLeft"
                                           GroupGridColumn="GroupGridColumn"
                                           GroupByColumns="_groupByColumns"
                                           OnAddGroup="AddGroup"
                                           OnDeleteGroup="DeleteGroup"
                                           OnFilter="OnFilter"
                                           OnAdvancedFilter="OnAdvancedFilter"
                                           OnSort="OnSortBy"
                                           HasGrouping="_groupByColumns.Count >= 1"
                                           GridOptions="GridOptions"
                                           OnMouseDown="OnMouseDown"
                                           Pinned="Pinned.Left"
                                           CheckboxSelectionPinned="@GridOptions.CheckboxSelectionPinned">
                                </BlgHeader>
                            </div>
                        }
                        <div class="blg-header-viewport" role="presentation">
                            @{
                                var gridTemplateColumns1 = "";

                                if (GridOptions.CheckboxSelectionColumn)
                                {
                                    gridTemplateColumns1 = "40px";
                                }

                                if (_activeGroups > 0)
                                {
                                    if (GroupGridColumn.Width <= 0)
                                    {
                                        GroupGridColumn.Width = 200;
                                    }

                                    gridTemplateColumns1 = gridTemplateColumns1 + " " + $"{GroupGridColumn.Width}px";
                                }

                                foreach (var column in notPinnedColumns)
                                {
                                    var columnStyle = column.CanGrow == 1 ? $"minmax({column.Width}px, 1fr)" : $"{column.Width}px";

                                    gridTemplateColumns1 = gridTemplateColumns1 + " " + columnStyle;
                                }

                                var gridTemplateRowsLeft2 = $"{GridOptions.HeaderHeight}px";

                                if (!GridOptions.SuppressFilterRow)
                                {
                                    gridTemplateRowsLeft2 = gridTemplateRowsLeft2 + " " + $"40px";
                                }

                                <div @ref="_eHeaderContainer" id="blgHeaderConatiner"
                                     @onmousemove="MouseMove"
                                     class="blg-header-container"
                                     role="rowgroup"
                                     style="display: grid; grid-template-rows:@gridTemplateRowsLeft2; grid-template-columns: @gridTemplateColumns1; transform: translateX(@_transformX)">
                                    <BlgHeader @ref="_blgHeader"
                                               GridColumns="notPinnedColumns"
                                               GroupGridColumn="GroupGridColumn"
                                               GroupByColumns="_groupByColumns"
                                               OnAddGroup="AddGroup"
                                               OnDeleteGroup="DeleteGroup"
                                               OnFilter="OnFilter"
                                               OnAdvancedFilter="OnAdvancedFilter"
                                               OnSort="OnSortBy"
                                               HasGrouping="_groupByColumns.Count >= 1"
                                               GridOptions="GridOptions"
                                               OnChangeSelectAllNodes="ChangeSelectAllNodes"
                                               OnExpandCollapse="ExpandCollapse"
                                               IsExpanded="_isExpanded"
                                               OnMouseDown="OnMouseDown"
                                               Pinned="Pinned.None"
                                               CheckboxSelectionPinned="@(!GridOptions.CheckboxSelectionPinned)"
                                               OnHeaderWithChange="HeaderWithChange">
                                    </BlgHeader>
                                </div>
                            }
                        </div>
                        @if (pinnedColumnsRight.Any())
                        {
                            var gridTemplateColumnsRight1 = "";

                            foreach (var column in pinnedColumnsRight)
                            {
                                var columnStyle = $"{column.Width}px";

                                gridTemplateColumnsRight1 = gridTemplateColumnsRight1 + " " + columnStyle;
                            }

                            var gridTemplateRowsLeft3 = $"{GridOptions.HeaderHeight}px";

                            if (!GridOptions.SuppressFilterRow)
                            {
                                gridTemplateRowsLeft3 = gridTemplateRowsLeft3 + " " + $"40px";
                            }

                            <div class="blg-pinned-right-header"
                                 role="presentation"
                                 style="display: grid; grid-template-rows:@gridTemplateRowsLeft3; grid-template-columns: @gridTemplateColumnsRight1">
                                <BlgHeader @ref="_blgHeader"
                                           GridColumns="pinnedColumnsRight"
                                           GroupGridColumn="GroupGridColumn"
                                           GroupByColumns="_groupByColumns"
                                           OnAddGroup="AddGroup"
                                           OnDeleteGroup="DeleteGroup"
                                           OnFilter="OnFilter"
                                           OnAdvancedFilter="OnAdvancedFilter"
                                           OnSort="OnSortBy"
                                           HasGrouping="_groupByColumns.Count >= 1"
                                           GridOptions="GridOptions"
                                           OnMouseDown="OnMouseDown"
                                           Pinned="Pinned.Right"
                                           CheckboxSelectionPinned="false">
                                </BlgHeader>
                            </div>
                        }
                    </div>
                    <div class="blg-viewport" style="height: @GetBlgViewPortHeight();">
                        @if (GridOptions.UseVirtualization && _loadedItems != null)
                        {
                            <div @ref="_spacerBefore" style="@GetSpacerStyle(_itemsBefore)"></div>
                        }
                        <div class="blg-viewport-wrapper" style="display: flex; position: relative; min-width: 0; flex: 1 1 auto;">
                            @if (pinnedColumnsLeft.Any())
                            {
                                var gridTemplateColumnsLeft = "";

                                if (GridOptions.CheckboxSelectionColumn && GridOptions.CheckboxSelectionPinned)
                                {
                                    gridTemplateColumnsLeft = "40px";
                                }

                                foreach (var column in pinnedColumnsLeft)
                                {
                                    var columnStyle = $"{column.Width}px";

                                    gridTemplateColumnsLeft = gridTemplateColumnsLeft + " " + columnStyle;
                                }

                                if (GridOptions.UseVirtualization)
                                {
                                    numberOfRows = _itemsToShow.Count;
                                }

                                var gridTemplateRowsLeft = $"repeat({numberOfRows},{GridOptions.RowHeight}px)";

                                <div class="blg-pinned-left-cols-container"
                                     role="presentation"
                                     style="display: grid; grid-template-rows:@gridTemplateRowsLeft; grid-template-columns: @gridTemplateColumnsLeft">
                                    <BlgBody @ref="_blgPinnedLeft"
                                             GridColumns="pinnedColumnsLeft"
                                             GroupGridColumn="GroupGridColumn"
                                             RowNodes="_itemsToShow"
                                             HasGrouping="_groupByColumns.Count >= 1"
                                             OnChangeExpanded="ChangeExpanded"
                                             OnCellClicked="CellClicked"
                                             OnRowClicked="RowClicked"
                                             OnRowDoubleClicked="RowDoubleClicked"
                                             OnSelectionChanged="SelectionChanged"
                                             OnMouseOver="MouseOverLeft"
                                             GridOptions="GridOptions"
                                             GridApi="@_gridApi"
                                             Pinned="Pinned.Left"
                                             CheckboxSelectionPinned="@GridOptions.CheckboxSelectionPinned"
                                             ComponentName="@BlGridMessageEmitter.BlgBodyLeft">
                                    </BlgBody>
                                </div>
                            }
                            <div class="blg-center-cols-clipper" role="presentation">
                                <div class="blg-center-cols-viewport" role="presentation" id="blg-table">
                                    @{
                                        var gridTemplateColumns = "";

                                        if (GridOptions.CheckboxSelectionColumn)
                                        {
                                            gridTemplateColumns = "40px";
                                        }

                                        if (_activeGroups > 0)
                                        {
                                            gridTemplateColumns = gridTemplateColumns + " " + $"{GroupGridColumn.Width}px";
                                        }

                                        foreach (var column in notPinnedColumns)
                                        {
                                            var columnStyle = column.CanGrow == 1 ? $"minmax({column.Width}px, 1fr)" : $"{column.Width}px";

                                            gridTemplateColumns = gridTemplateColumns + " " + columnStyle;
                                        }

                                        if (GridOptions.UseVirtualization)
                                        {
                                            numberOfRows = _itemsToShow.Count;
                                        }

                                        var gridTemplateRows = $"repeat({numberOfRows},{GridOptions.RowHeight}px)";

                                        <div @ref="_eCenterContainer"
                                             class="blg-center-cols-container"
                                             role="grid"
                                             style="transform: translateX(@_transformX); display: grid; grid-template-rows:@gridTemplateRows; grid-template-columns: @gridTemplateColumns">
                                            <BlgBody @ref="_blgCenter"
                                                     GridColumns="notPinnedColumns"
                                                     GroupGridColumn="GroupGridColumn"
                                                     RowNodes="_itemsToShow"
                                                     HasGrouping="_groupByColumns.Count >= 1"
                                                     OnChangeExpanded="ChangeExpanded"
                                                     OnCellClicked="CellClicked"
                                                     OnRowClicked="RowClicked"
                                                     OnRowDoubleClicked="RowDoubleClicked"
                                                     OnSelectionChanged="SelectionChanged"
                                                     OnMouseOver="MouseOverCenter"
                                                     GridOptions="GridOptions"
                                                     GridApi="@_gridApi"
                                                     Pinned="Pinned.None"
                                                     CheckboxSelectionPinned="@(!GridOptions.CheckboxSelectionPinned)"
                                                     ComponentName="@BlGridMessageEmitter.BlgBodyCenter">
                                            </BlgBody>
                                        </div>
                                    }
                                </div>
                            </div>
                            @if (pinnedColumnsRight.Any())
                            {
                                var gridTemplateColumnsRight = "";

                                foreach (var column in pinnedColumnsRight)
                                {
                                    var columnStyle = $"{column.Width}px";

                                    gridTemplateColumnsRight = gridTemplateColumnsRight + " " + columnStyle;
                                }

                                if (GridOptions.UseVirtualization)
                                {
                                    numberOfRows = _itemsToShow.Count;
                                }

                                var gridTemplateRowsRight = $"repeat({numberOfRows},{GridOptions.RowHeight}px)";

                                <div class="blg-pinned-right-cols-container"
                                     role="presentation"
                                     style="display: grid; grid-template-rows:@gridTemplateRowsRight; grid-template-columns: @gridTemplateColumnsRight">
                                    <BlgBody @ref="_blgPinnedRight"
                                             GridColumns="pinnedColumnsRight"
                                             GroupGridColumn="GroupGridColumn"
                                             RowNodes="_itemsToShow"
                                             HasGrouping="_groupByColumns.Count >= 1"
                                             OnChangeExpanded="ChangeExpanded"
                                             OnCellClicked="CellClicked"
                                             OnRowClicked="RowClicked"
                                             OnRowDoubleClicked="RowDoubleClicked"
                                             OnSelectionChanged="SelectionChanged"
                                             OnMouseOver="MouseOverRight"
                                             GridOptions="GridOptions"
                                             GridApi="@_gridApi"
                                             Pinned="Pinned.Right"
                                             CheckboxSelectionPinned="false"
                                             ComponentName="@BlGridMessageEmitter.BlgBodyRight">
                                    </BlgBody>
                                </div>
                            }
                        </div>
                        @if (GridOptions.UseVirtualization && _loadedItems != null)
                        {
                            var itemsAfter = Math.Max(0, _itemCount - _visibleItemCapacity - _itemsBefore);

                            <div @ref="_spacerAfter" style="@GetSpacerStyle(itemsAfter)"></div>
                        }
                    </div>
                    <div class="blg-body-horizontal-scroll" aria-hidden="true">
                        @{
                            <div class="blg-horizontal-left-spacer" style="width: @(leftSpacerWith + "px"); min-width: @(leftSpacerWith + "px"); max-width: @(leftSpacerWith + "px");"></div>
                            <div @ref="_eBodyHorizontalScrollViewport" class="blg-body-horizontal-scroll-viewport" @onscroll="() => OnScroll()">
                                <div @ref="_eBodyHorizontalScrollContainer"
                                     class="blg-body-horizontal-scroll-container"
                                     style="width:@(eBodyHorizontalScrollContainerWidth + "px")">
                                </div>
                            </div>
                            <div class="blg-horizontal-right-spacer" style="width: @(rightSpacerWith + "px"); min-width: @(rightSpacerWith + "px"); max-width: @(rightSpacerWith + "px");"></div>
                        }
                    </div>
                </div>
            </div>
            @if (GridOptions.SuppressPaginationPanel == false)
            {
                <div style="height:@($"{PaginatorHeight}px")">
                    <DnetPaginator @ref="_paginator"
                                   OnGoToFirstPage="GoToFirstPage"
                                   OnGoToPreviousPage="GoToPreviousPage"
                                   OnGoToNextPage="GoToNextPage"
                                   OnGoToLastPage="GoToLastPage"
                                   OnGoToSpecificPage="GoToSpecificPage"
                                   CurrentPage="_searchModel.PaginationModel.CurrentPage"
                                   PageSize="_searchModel.PaginationModel.PageSize"
                                   TotalItems="_searchModel.PaginationModel.ItemsCount">
                    </DnetPaginator>
                </div>

            }
        </div>
    }
</div>

@code {

    [Parameter]
    public EventCallback<CellClikedData<TItem>> OnCellClicked { get; set; }

    [Parameter]
    public EventCallback<RowNode<TItem>> OnRowClicked { get; set; }

    [Parameter]
    public EventCallback<RowNode<TItem>> OnRowDoubleClicked { get; set; }

    [Parameter]
    public EventCallback<List<RowNode<TItem>>> OnSelectionChanged { get; set; }

    [Parameter]
    public EventCallback<SearchModel> OnPaginationChanged { get; set; }

    [Parameter]
    public EventCallback<SearchModel> OnSortingChanged { get; set; }

    [Parameter]
    public EventCallback<SearchModel> OnFilterChanged { get; set; }

    [Parameter]
    public EventCallback<SearchModel> OnAdvancedFilterChanged { get; set; }

    [Parameter]
    public EventCallback<GroupModel> OnGroupingChanged { get; set; }

    [Parameter, EditorRequired]
    public IEnumerable<TItem> GridData { get; set; } = new List<TItem>();

    [Parameter, EditorRequired]
    public List<GridColumn<TItem>> GridColumns { get; set; }

    [Parameter]
    public GridColumn<TItem> GroupGridColumn { get; set; } = new();

    [Parameter]
    public GridOptions<TItem> GridOptions { get; set; } = new();

    [Parameter]
    public bool HasGrouping { get; set; }

    [Parameter]
    public bool ItemsCount { get; set; }

    [Parameter]
    public int OverscanCount { get; set; } = 4;

    [Parameter]
    public int PaginatorHeight { get; set; } = 50;

    internal long _nextId { get; set; } = -1;

    private BlgBody<TItem> _blgCenter { get; set; }

    private BlgBody<TItem>? _blgPinnedLeft { get; set; }

    private BlgBody<TItem>? _blgPinnedRight { get; set; }

    private DnetPaginator? _paginator { get; set; }

    private ElementReference _eCenterContainer { get; set; }

    private ElementReference _eBodyHorizontalScrollContainer { get; set; }

    private ElementReference _eHeaderContainer { get; set; }

    private ElementReference _eBodyHorizontalScrollViewport { get; set; }

    private ElementReference _eGridContainer { get; set; }

    private int eBodyHorizontalScrollContainerWidth { get; set; }

    private string _transformX { get; set; } = "0px";

    private TreeRowNode<TItem> _treeRn { get; set; }

    private List<RowNode<TItem>> _rowNodes { get; set; } = new();

    protected Guid ElemenId { get; set; } = Guid.NewGuid();

    private List<string> _groupByColumns { get; set; } = new();

    public List<GridColumn<TItem>> _gridColumns { get; set; } = new();

    private List<RowNode<TItem>> _renderedRowNodes { get; set; } = new();

    private string _gridClasses { get; set; } = "blg-arcadia-theme";

    private bool _mouseDown { get; set; }

    private int _lastColumnPosition { get; set; }

    private GridColumn<TItem>? _columnSelected { get; set; }

    private SearchModel? _searchModel { get; set; }

    private BlgHeader<TItem>? _blgHeader { get; set; }

    private int _activeGroups { get; set; } = 0;

    private bool _firstRender { get; set; } = true;

    private GridApi<TItem> _gridApi { get; set; }

    private bool _isDataNoInitialized { get; set; }

    private bool _isColumnsNoInitialized { get; set; }

    private bool _shouldRender;

    private bool _licResult = true;

    private RowNode<TItem>? _previousHoverRowNode;

    private bool _updatingGridData { get; set; } = false;

    private bool _pinnedRight { get; set; }

    private bool _pinnedLeft { get; set; }

    public IEnumerable<TItem> _gridData { get; set; } = new List<TItem>();

    private bool _isExpanded = false;


    // Virtualizations
    private List<RowNode<TItem>> _itemsToShow = new();

    private VirtualizeJsInterop _jsInterop;

    private ElementReference _spacerBefore;

    private ElementReference _spacerAfter;

    private int _itemsBefore;

    private int _visibleItemCapacity;

    private int _itemCount;

    private float _itemSize;

    private float _containerSize;

    private CancellationTokenSource? _refreshCts;

    private Exception _refreshException;

    private int _lastRenderedItemCount;

    private int _lastRenderedPlaceholderCount;

    private IEnumerable<RowNode<TItem>> _loadedItems = new List<RowNode<TItem>>();

    private int _loadedItemsStartIndex;

    private ItemsProviderDelegate<RowNode<TItem>> _itemsProvider = default!;

    private ICollection<RowNode<TItem>> _items { get; set; }
    // Virtualizations


    public override Task SetParametersAsync(ParameterView parameters)
    {
        return base.SetParametersAsync(parameters);
    }

    protected override void OnInitialized()
    {
        _gridApi = new GridApi<TItem>();

        _searchModel = new();

        _searchModel.AdvancedFilterModels = new();

        _searchModel.PaginationModel = new();

        _searchModel.SortModel = new();

        _jsInterop = new VirtualizeJsInterop(this, JSRuntime);

        _itemsProvider = DefaultItemsProvider;

        _isDataNoInitialized = true;

        _isColumnsNoInitialized = true;
    }

    private void HeaderWithChange(int headerWidth)
    {
        eBodyHorizontalScrollContainerWidth = headerWidth;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (GridOptions.UseVirtualization)
        {
            _itemSize = GridOptions.RowHeight;
        }

        if (GridData != null && GridColumns != null)
        {
            if (_isDataNoInitialized && GridData.Any())
            {
                _gridData = GridData;

                InitializeGridWorkingData();

                await InitializeGrid();

                _isDataNoInitialized = false;
            }

            if (_isColumnsNoInitialized & GridColumns.Any())
            {
                _gridColumns = AdvancedFilteringService.InitAdvancedFilterModels(GridColumns, GridOptions.DefaultAdvancedFilterOperator);

                _pinnedRight = _gridColumns.Where(e => e.Pinned == Pinned.Right && !e.Hide).Any();

                _pinnedLeft = _gridColumns.Where(e => e.Pinned == Pinned.Left && !e.Hide).Any();

                if (_blgHeader != null) _blgHeader.ActiveRender();

                await InitializeGrid();

                _isColumnsNoInitialized = false;
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _firstRender = true;

            var result = await BlGridInterop.AddWindowEventListeners(_eGridContainer, DotNetObjectReference.Create(this));

            var result1 = await BlGridInterop.AddTouchListeners(_eCenterContainer, _eBodyHorizontalScrollViewport, DotNetObjectReference.Create(this));

            if (GridOptions.UseVirtualization)
            {
                await _jsInterop.InitializeAsync(_spacerBefore, _spacerAfter, GridOptions.RowHeight);
            }

            StateHasChanged();
        }

        _firstRender = false;

        _shouldRender = false;
    }

    private void InitializeGridWorkingData()
    {
        if (!string.IsNullOrEmpty(GridOptions.GridClass)) _gridClasses += " " + GridOptions.GridClass;

        _mouseDown = false;

        _lastColumnPosition = 0;

        _searchModel = new SearchModel
            {
                PaginationModel = new PaginationModel
                {
                    CurrentPage = GridOptions.PaginationStartPage,
                    PageSize = GridOptions.PaginationPageSize
                }
            };

        _treeRn = BuildRowNodes();

        _rowNodes = FlattenTree(_treeRn, 0).FindAll(e => e.Show).ToList();

        _gridApi.RowNodes = _rowNodes;

        _gridApi.TreeRowNodes = _treeRn;
    }

    private TreeRowNode<TItem> InitializeTree()
    {
        var treeRn = new TreeRowNode<TItem>
            {
                Data = new RowNode<TItem>
                {
                    IsGroup = true,
                    Show = false,
                    Expanded = true
                },
                Children = new List<TreeRowNode<TItem>>()
            };

        return treeRn;
    }

    private async Task InitializeGrid()
    {
        var numberOfRows = !GridOptions.EnableServerSidePagination ? _rowNodes.Count : GridOptions.NumberOfRows;

        _searchModel.PaginationModel.ItemsCount = numberOfRows;

        //_gridColumns = AdvancedFilteringService.InitAdvancedFilterModels(GridColumns, GridOptions.DefaultAdvancedFilterOperator);

        //In debug mode do not do Default operations
        if (!GridOptions.IsDebugMode) OperationsByDefault();

        if (GridOptions.GroupDefaultExpanded && _treeRn != null) _treeRn = ExpandCollapseTreeRowNode(_treeRn, true);

        await Update();
    }

    private string GetBlgViewPortHeight()
    {
        var height = GridOptions.HeaderHeight;

        if (!GridOptions.SuppressFilterRow)
        {
            height = height + 55;
        }
        else
        {
            height = height + 15;
        }

        return $"calc(100% - {height}px)";
    }

    private TreeRowNode<TItem> BuildRowNodes()
    {
        var treeRn = InitializeTree();

        foreach (var data in _gridData)
        {
            treeRn.Children.Add(new TreeRowNode<TItem>
                {
                    Data = new RowNode<TItem>
                    {
                        RowNodeId = GetId(),
                        RowData = data,
                        Show = true,
                        Expanded = true,
                        AdvShow = true
                    },
                    Children = new List<TreeRowNode<TItem>>(),
                    ColumnName = ""
                });
        }

        return treeRn;
    }

    private List<RowNode<TItem>> FlattenTree(TreeRowNode<TItem> tree, int level)
    {
        var rowNodeList = new List<RowNode<TItem>>();

        if (tree.Data.IsGroup)
        {
            tree.Data.GroupValue = tree.Value;
            tree.Data.Level = level;
        }

        rowNodeList.Add(tree.Data);

        if (!tree.Data.Expanded) return rowNodeList;

        foreach (var child in tree.Children)
        {
            rowNodeList.AddRange(FlattenTree(child, level + 1));
        }

        return rowNodeList;
    }

    private long GetId()
    {
        _nextId++;
        return _nextId;
    }

    private void OperationsByDefault()
    {
        if (GridOptions.GroupDefaultExpanded) _isExpanded = true;

        if (!_rowNodes.Any()) return;

        if (!GridOptions.EnableServerSideAdvancedFilter) AdvancedFilterByDefault();

        if (!GridOptions.EnableServerSideFilter) FilterByDefault();

        if (!GridOptions.EnableServerSideSorting) SortByDefault();

        if (!GridOptions.EnableServerSideGrouping) GroupByDefault();
    }

    private void AdvancedFilterByDefault()
    {
        AdvancedFilterBy();
    }

    private void FilterByDefault()
    {
        FilterBy();
    }

    private void SortByDefault()
    {
        var index = _gridColumns.FindIndex(e => e.Sortable && e.SortStatus != SortOrder.None);

        if (index == -1) return;

        SortBy(_gridColumns[index]);
    }

    private void GroupByDefault()
    {
        if (!GridOptions.EnableGrouping) return;

        _groupByColumns.Clear();

        for (var i = 0; i < _gridColumns.Count; ++i)
        {
            var index = _gridColumns.FindIndex(e => e.RowGroup && e.RowGroupIndex == i);

            if (index == -1) break;

            _activeGroups++;

            // _activeGroups == 1 Add GroupColumnWidth just with the first creation
            //if (_activeGroups == 1) eBodyHorizontalScrollContainerWidth = eBodyHorizontalScrollContainerWidth + GroupGridColumn.Width;

            AuxAddGroup(_gridColumns[index].DataField);
        }
    }

    private async void ChangeExpanded(long id)
    {
        var index = _rowNodes.FindIndex(rowNode => rowNode.RowNodeId == id);

        _rowNodes[index].Expanded = !_rowNodes[index].Expanded;

        await Update();
    }

    private void FilterBy()
    {
        if (GridOptions.EnableServerSideFilter)
        {
            AdvancedFilterBy();
        }
        else
        {
            var filterList = new List<FilterModel>();

            foreach (var gridColumn in _gridColumns)
                if (gridColumn.CellDataType != CellDataType.None && !string.IsNullOrEmpty(gridColumn.Filter))
                {
                    filterList.Add(new FilterModel
                        {
                            Filter = gridColumn.Filter,
                            DataDield = gridColumn.DataField,
                            Type = gridColumn.CellDataType
                        });
                }

            var cellParams = new CellParams<TItem>
                {
                    GridApi = _gridApi,
                };

            _treeRn = FilteringService.FilterBy(_treeRn, filterList, _gridColumns, cellParams);

            OnFilterChanged.InvokeAsync(_searchModel);
        }
    }

    private void AdvancedFilterBy()
    {
        _searchModel.AdvancedFilterModels = new List<AdvancedFilterModel>();

        if (GridOptions.EnableServerSideFilter)
        {
            var filterModels = new List<AdvancedFilterModel>();

            foreach (var gridColumn in _gridColumns)
                if (gridColumn.CellDataType != CellDataType.None && !string.IsNullOrEmpty(gridColumn.Filter))
                {
                    var filterOperator = gridColumn.CellDataType switch
                    {
                        CellDataType.Number => FilterOperator.Equals,
                        CellDataType.Boolean => FilterOperator.Equals,
                        _ => FilterOperator.Contains
                    };

                    var advancedFilterModel = new AdvancedFilterModel
                        {
                            AdditionalOperator = FilterOperator.None,
                            AdditionalValue = null,
                            Column = gridColumn.DataField,
                            Condition = FilterCondition.None,
                            Operator = filterOperator,
                            Type = gridColumn.CellDataType,
                            Value = gridColumn.Filter
                        };

                    filterModels.Add(advancedFilterModel);
                }

            _searchModel.AdvancedFilterModels.AddRange(filterModels);
        }

        var advancedFilterList = _gridColumns.Where(e => e.CellDataType != CellDataType.None && !string.IsNullOrEmpty(e.AdvancedFilterModel.Value))
            .Select(e => e.AdvancedFilterModel).ToList();

        var advancedFilterModels = advancedFilterList.Count > 0 ? advancedFilterList : new List<AdvancedFilterModel>();

        _searchModel.AdvancedFilterModels.AddRange(advancedFilterModels);

        if (GridOptions.EnableServerSideAdvancedFilter)
        {
            OnAdvancedFilterChanged.InvokeAsync(_searchModel);
        }
        else
        {
            var cellParams = new CellParams<TItem>
                {
                    GridApi = _gridApi,
                };

            _treeRn = AdvancedFilteringService.FilterBy(_treeRn, advancedFilterList, _gridColumns, cellParams);
            OnAdvancedFilterChanged.InvokeAsync(_searchModel);
        }
    }

    private async void OnSortBy(string dataField)
    {
        if (!_rowNodes.Any() || _treeRn == null) return;

        var gridColumn = _gridColumns.Find(e => e.DataField == dataField);

        SortingService.UpdateOrder(_gridColumns, gridColumn);

        _searchModel.PaginationModel.CurrentPage = 1;

        SortBy(gridColumn);

        await Update();
    }

    private async void SortBy(GridColumn<TItem> gridColumn)
    {
        var cellParams = new CellParams<TItem>
            {
                GridApi = _gridApi,
            };

        if (gridColumn.SortStatus == SortOrder.None && !GridOptions.EnableServerSideSorting)
        {
            InitializeGridWorkingData();
            await InitializeGrid();
            return;
        }

        _searchModel.SortModel = new SortModel
            {
                ColumnName = gridColumn.DataField,
                Order = gridColumn.SortStatus
            };

        if (GridOptions.EnableServerSideSorting)
        {
            await OnSortingChanged.InvokeAsync(_searchModel);
        }
        else
            _treeRn = _groupByColumns.Contains(gridColumn.DataField)
                ? SortingService.SortGroupingBy(_treeRn, gridColumn, cellParams)
                : SortingService.SortBy(_treeRn, gridColumn, cellParams);
    }

    private async void OnAdvancedFilter()
    {
        _searchModel.PaginationModel.CurrentPage = 1;

        AdvancedFilterBy();

        await Update();
    }

    private async void OnFilter()
    {
        _searchModel.PaginationModel.CurrentPage = 1;

        FilterBy();

        await Update();
    }

    private void ManageGridCellSpanning()
    {
        for (var i = 0; i < _renderedRowNodes.Count; ++i)
        {
            _renderedRowNodes[i].RowSpanSkippedCells = new Dictionary<GridColumn<TItem>, bool>();
            _renderedRowNodes[i].RowSpanTargetCells = new Dictionary<GridColumn<TItem>, uint>();
            _renderedRowNodes[i].FirstSpanRow = new Dictionary<GridColumn<TItem>, uint>();
        }

        var cellParams = new CellParams<TItem>
            {
                GridApi = _gridApi,
            };

        for (var i = 0; i < _renderedRowNodes.Count; ++i)
        {
            var rowNode = _renderedRowNodes[i];

            cellParams.RowNode = rowNode;
            cellParams.RowData = rowNode.RowData;

            if (rowNode.IsGroup) continue;

            foreach (var cell in _gridColumns)
            {
                cellParams.GridColumn = cell;

                //var rowSpan = cell.RowSpanFn == null ? _ => 1 : cell.RowSpanFn;
                var rowSpanFn = cell.RowSpanFn ?? (_ => 1);

                var skip = rowSpanFn(cellParams) - 1;

                //if (rowNode.RowSpanSkippedCells.ContainsKey(cell) || skip <= 0) continue;
                if (rowNode.RowSpanSkippedCells.TryGetValue(cell, out bool skipped) || skip <= 0) continue;

                int j;
                for (j = 1; j <= skip && (i + j < _renderedRowNodes.Count) && !_renderedRowNodes[i + j].IsGroup; ++j)
                {
                    _renderedRowNodes[i + j].RowSpanSkippedCells.Add(cell, true);
                }

                for (var k = 1; k < j; ++k)
                {
                    _renderedRowNodes[i + k].FirstSpanRow.Add(cell, (uint)(j - k));
                }

                rowNode.RowSpanTargetCells.Add(cell, (uint)j);
            }
        }
    }

    private async Task Update()
    {
        if (_treeRn != null)
        {
            _treeRn.Data.Show = false;

            _rowNodes = FlattenTree(_treeRn, 0).FindAll(e => e.AdvShow && e.Show);

            var numberOfRows = !GridOptions.EnableServerSidePagination ? _rowNodes.Count : _searchModel.PaginationModel.ItemsCount;

            _paginator?.UpdatePaginatorState(_searchModel.PaginationModel.CurrentPage, numberOfRows);

            _blgCenter?.ActiveRender();

            if (_pinnedLeft) _blgPinnedLeft?.ActiveRender();

            if (_pinnedRight) _blgPinnedRight?.ActiveRender();

            if (_blgHeader != null) _blgHeader?.ActiveRender();

            if (GridOptions.EnableServerSidePagination)
            {
                _renderedRowNodes = _rowNodes;

                ManageGridCellSpanning();

                if (GridOptions.UseVirtualization)
                {
                    if (!_firstRender) await DefaultVirtualization();
                }
                else
                {
                    _itemsToShow = _renderedRowNodes;
                    StateHasChanged();
                }
            }
            else
            {
                _searchModel.PaginationModel.ItemsCount = numberOfRows;

                await AssignRangeRenderedRows();
            }
        }
    }

    private async void AddGroup(string columnName)
    {
        if (!_rowNodes.Any() || _treeRn == null) return;

        _activeGroups++;

        // _activeGroups == 1 Add GroupColumnWidth just with the first creation
        //if (_activeGroups == 1) eBodyHorizontalScrollContainerWidth = eBodyHorizontalScrollContainerWidth + GroupGridColumn.Width;

        _searchModel.PaginationModel.CurrentPage = 1;

        AuxAddGroup(columnName);

        if (GridOptions.GroupDefaultExpanded && _treeRn != null) _treeRn = ExpandCollapseTreeRowNode(_treeRn, true);

        FilterBy();

        AdvancedFilterBy();

        await Update();
    }

    private void AuxAddGroup(string dataField)
    {
        if (_groupByColumns.Contains(dataField)) return;

        _groupByColumns.Add(dataField);

        if (GridOptions.EnableServerSideGrouping)
        {
            OnGroupingChanged.InvokeAsync(new GroupModel()
                {
                    ColumnName = dataField,
                    Operation = GroupOperation.Add
                });
        }
        else
        {
            var cellParams = new CellParams<TItem>
                {
                    GridApi = _gridApi,
                };

            var lastId = _nextId;

            var gridColumn = _gridColumns.Find(e => e.DataField == dataField);

            _treeRn = GroupingService.AddGroupByColumn(_treeRn, gridColumn, _gridColumns, ref lastId, cellParams);
            _nextId = lastId;
        }
    }

    private async void DeleteGroup(string columnName)
    {
        if (!_rowNodes.Any() || _treeRn == null) return;

        _activeGroups--;

        //if (_activeGroups == 0) eBodyHorizontalScrollContainerWidth = eBodyHorizontalScrollContainerWidth - GroupGridColumn.Width;

        _searchModel.PaginationModel.CurrentPage = 1;

        AuxDeleteGroup(columnName);

        FilterBy();

        AdvancedFilterBy();

        await Update();
    }

    private void AuxDeleteGroup(string dataField)
    {
        _groupByColumns.Remove(dataField);

        if (GridOptions.EnableServerSideGrouping)
        {
            OnGroupingChanged.InvokeAsync(new GroupModel()
                {
                    ColumnName = dataField,
                    Operation = GroupOperation.Delete
                });
        }
        else
        {
            var lastId = _nextId;

            var cellParams = new CellParams<TItem>
                {
                    GridApi = _gridApi,
                };

            var gridColumn = _gridColumns.Find(e => e.DataField == dataField);

            _treeRn = GroupingService.RemoveGroupByColumn(_treeRn, gridColumn, _gridColumns, ref lastId, cellParams);

            _nextId = lastId;
        }
    }

    private async Task AssignRangeRenderedRows()
    {
        if (GridOptions.Pagination)
        {
            var currentPage = _searchModel.PaginationModel.CurrentPage;

            var pageSize = _searchModel.PaginationModel.PageSize;

            var itemsCount = _searchModel.PaginationModel.ItemsCount;

            if (currentPage <= 0) currentPage = 1;

            var (startIndex, count) = PaginatorService.GetRangePage(currentPage, pageSize, itemsCount);

            _renderedRowNodes = _rowNodes.GetRange(startIndex, count);
        }
        else
        {
            _renderedRowNodes = _rowNodes;
        }

        ManageGridCellSpanning();

        _gridApi.RenderedRowNodes = _renderedRowNodes;

        if (GridOptions.UseVirtualization)
        {
            if (!_firstRender) await DefaultVirtualization();
        }
        else
        {
            _itemsToShow = _renderedRowNodes;
            StateHasChanged();
        }
    }

    private async void PaginationChanged(int currentPage)
    {
        _searchModel.PaginationModel.CurrentPage = currentPage;

        if (GridOptions.EnableServerSidePagination)
        {
            await OnPaginationChanged.InvokeAsync(_searchModel);
        }
        else
            await AssignRangeRenderedRows();

        _blgCenter?.ActiveRender();
        if (_pinnedLeft) _blgPinnedLeft?.ActiveRender();
        if (_pinnedRight) _blgPinnedRight?.ActiveRender();
    }

    private void GoToFirstPage(int currentPage)
    {
        PaginationChanged(currentPage);
    }

    private void GoToPreviousPage(int currentPage)
    {
        PaginationChanged(currentPage);
    }

    private void GoToNextPage(int currentPage)
    {
        PaginationChanged(currentPage);
    }

    private void GoToLastPage(int currentPage)
    {
        PaginationChanged(currentPage);
    }

    private void GoToSpecificPage(int specificPage)
    {
        PaginationChanged(specificPage);
    }

    private async void CellClicked(CellClikedEventData cellClikedEventData)
    {
        _blgCenter?.ActiveRender();

        if (_pinnedLeft) _blgPinnedLeft?.ActiveRender();

        if (_pinnedRight) _blgPinnedRight?.ActiveRender();

        var gridColumn = _gridColumns.Find(e => e.ColumnId == cellClikedEventData.CellId);

        var rownode = _rowNodes.Find(e => e.RowNodeId == cellClikedEventData.RowNodeId);

        var cellClikedData = new CellClikedData<TItem>();

        cellClikedData.ColumnId = gridColumn.ColumnId;

        cellClikedData.ColumnOrder = gridColumn.ColumnOrder;

        cellClikedData.HeaderName = gridColumn.HeaderName;

        cellClikedData.DataField = gridColumn.DataField;

        cellClikedData.AdvancedFilterModel = gridColumn.AdvancedFilterModel;

        cellClikedData.RowNode = rownode;

        await OnCellClicked.InvokeAsync(cellClikedData);
    }

    private async void RowClicked(long rowNodeId)
    {
        var rowNode = _rowNodes.Find(e => e.RowNodeId == rowNodeId);

        _blgCenter?.ActiveRender();

        if (_pinnedLeft) _blgPinnedLeft?.ActiveRender();

        if (_pinnedRight) _blgPinnedRight?.ActiveRender();

        await OnRowClicked.InvokeAsync(rowNode);
    }

    private async void RowDoubleClicked(long rowNodeId)
    {
        var rowNode = _rowNodes.Find(e => e.RowNodeId == rowNodeId);

        await OnRowDoubleClicked.InvokeAsync(rowNode);
    }

    private async void SelectionChanged(List<long> rowNodeIds)
    {
        _blgCenter?.ActiveRender();

        if (_pinnedLeft) _blgPinnedLeft?.ActiveRender();

        if (_pinnedRight) _blgPinnedRight?.ActiveRender();

        var rowNodes = _rowNodes.Where(p => p.RowData is not null && rowNodeIds.Contains(p.RowNodeId)).Select(p => p).ToList();

        await OnSelectionChanged.InvokeAsync(rowNodes);
    }

    private void MouseOverLeft(long rowNodeId)
    {
        if (_updatingGridData) return;

        var rowNode = _rowNodes.Where(p => p.RowNodeId == rowNodeId).Select(p => p).FirstOrDefault();

        if (_previousHoverRowNode != null && rowNodeId == -1)
        {
            _previousHoverRowNode.HoverThisNode(false);
        }

        if (rowNodeId != -1)
        {
            rowNode.HoverThisNode(true);
            _previousHoverRowNode = rowNode;
        }

        _blgCenter?.ActiveRender();

        if (_pinnedRight) _blgPinnedRight?.ActiveRender();

        StateHasChanged();
    }

    private void MouseOverCenter(long rowNodeId)
    {
        if (_updatingGridData) return;

        var rowNode = _rowNodes.Where(p => p.RowNodeId == rowNodeId).Select(p => p).FirstOrDefault();

        if (_previousHoverRowNode != null && rowNodeId == -1)
        {
            _previousHoverRowNode.HoverThisNode(false);
        }

        if (rowNodeId != -1)
        {
            rowNode.HoverThisNode(true);
            _previousHoverRowNode = rowNode;
        }

        if (_pinnedRight) _blgPinnedRight?.ActiveRender();

        if (_pinnedLeft) _blgPinnedLeft?.ActiveRender();

        StateHasChanged();
    }

    private void MouseOverRight(long rowNodeId)
    {
        if (_updatingGridData) return;

        var rowNode = _rowNodes.Where(p => p.RowNodeId == rowNodeId).Select(p => p).FirstOrDefault();

        if (_previousHoverRowNode != null && rowNodeId == -1)
        {
            _previousHoverRowNode.HoverThisNode(false);
        }

        if (rowNodeId != -1)
        {
            rowNode.HoverThisNode(true);
            _previousHoverRowNode = rowNode;
        }

        _blgCenter?.ActiveRender();

        if (_pinnedLeft) _blgPinnedLeft?.ActiveRender();

        StateHasChanged();
    }

    private async void OnScroll()
    {
        var result = await BlGridInterop.GetElementScrollLeft(_eBodyHorizontalScrollViewport);

        _transformX = $"-{Math.Floor(result)}px";

        StateHasChanged();
    }

    private TreeRowNode<TItem> SelectTreeRowNode(TreeRowNode<TItem> tree, bool select)
    {
        tree.Data.SelectThisNode(select);

        foreach (var subtree in tree.Children)
            SelectTreeRowNode(subtree, select);

        return tree;
    }

    private TreeRowNode<TItem> ExpandCollapseTreeRowNode(TreeRowNode<TItem> tree, bool expandCollapse)
    {
        tree.Data.Expanded = expandCollapse;

        foreach (var subtree in tree.Children)
            ExpandCollapseTreeRowNode(subtree, expandCollapse);

        return tree;
    }

    private async void ChangeSelectAllNodes(bool value)
    {
        if (!_rowNodes.Any() || _treeRn == null) return;

        AuxChangeSelectAllNodes(_treeRn, value);

        var selectedRowNodes = new List<RowNode<TItem>>();

        if (value)
        {
            var flattenTree = FlattenTree(_treeRn, 0);
            selectedRowNodes = _rowNodes = flattenTree.Where(e => (e.IsSelected() && e.RowData != null && !e.IsGroup) || (e.IsSelected() && e.IsGroup)).Select(p => p).ToList();
        }
        else
        {
            _rowNodes = FlattenTree(_treeRn, 0).Where(e => (!e.IsSelected() && e.RowData != null && !e.IsGroup) || (!e.IsSelected() && e.IsGroup)).Select(p => p).ToList();
        }

        _blgCenter?.ActiveRender();

        if (_pinnedRight) _blgPinnedRight?.ActiveRender();

        if (_pinnedRight) _blgPinnedRight?.ActiveRender();

        var rowNodes = selectedRowNodes.Where(p => p.RowData is not null).ToList();

        if (_blgCenter is not null) _blgCenter.SelectallNotify(value);

        await OnSelectionChanged.InvokeAsync(rowNodes);
    }

    private void MouseMove(MouseEventArgs e)
    {
        if (!_mouseDown) return;

        var clientX = e.ClientX;

        if (_columnSelected.Width + (int)clientX - _lastColumnPosition > GridOptions.ColumnMinWidth)
        {
            _columnSelected.Width += (int)clientX - _lastColumnPosition;

            eBodyHorizontalScrollContainerWidth = eBodyHorizontalScrollContainerWidth + (int)clientX - _lastColumnPosition;

            _lastColumnPosition = (int)clientX;

            if (_blgHeader != null) _blgHeader.ActiveRender();
        }
    }

    private void MouseUp()
    {
        if (!_mouseDown) return;

        _mouseDown = false;

        _lastColumnPosition = 0;
    }

    private void OnMouseDown(Tuple<string, int> redimensionInfo)
    {
        _mouseDown = true;

        _columnSelected = _gridColumns.FirstOrDefault(p => p.DataField == redimensionInfo.Item1);

        _lastColumnPosition = redimensionInfo.Item2;
    }

    private void AuxChangeSelectAllNodes(TreeRowNode<TItem> tree, bool value)
    {
        var disabledRow = false;

        if (tree.Data.RowData != null)
        {
            disabledRow = GridOptions.DisableRow != null && GridOptions?.DisableRow(tree.Data.RowData) == true ? true : false;
        }

        tree.Data.SelectThisNode(value && disabledRow == false);

        foreach (var subtree in tree.Children)
            AuxChangeSelectAllNodes(subtree, value);
    }

    public async Task ExpandCollapse(bool isExpanded)
    {
        if (isExpanded)
        {
            await ExpandAll();
        }
        else
        {
            await CollapseAll();
        }
    }

    [JSInvokable]
    public void MouseLeave()
    {
        if (_mouseDown)
        {
            _mouseDown = false;

            _lastColumnPosition = 0;
        }
    }

    public async Task SelectAll()
    {
        _treeRn = SelectTreeRowNode(_treeRn, true);
        await Update();
    }

    public async Task DeselectAll()
    {
        _treeRn = SelectTreeRowNode(_treeRn, false);
        await Update();
    }

    public async Task ExpandAll()
    {
        _treeRn = ExpandCollapseTreeRowNode(_treeRn, true);

        _isExpanded = true;

        if (_blgHeader != null) _blgHeader.ActiveRender();

        await Update();
    }

    public async Task CollapseAll()
    {
        _treeRn = ExpandCollapseTreeRowNode(_treeRn, false);

        _treeRn.Data.Expanded = true;

        _isExpanded = false;

        if (_blgHeader != null) _blgHeader.ActiveRender();

        _searchModel.PaginationModel.CurrentPage = 1;

        await Update();
    }

    public async void DeselectAllFiltered()
    {
        foreach (var gridcolumn in _gridColumns.Where(gridcolumn => gridcolumn.CellDataType != CellDataType.None))
        {
            gridcolumn.Filter = "";
            var filterModel = gridcolumn.AdvancedFilterModel;
            filterModel.AdditionalValue = filterModel.Value = "";
            filterModel.AdditionalOperator = FilterOperator.None;
            filterModel.Operator = GridOptions.DefaultAdvancedFilterOperator;
            filterModel.Condition = FilterCondition.None;
            filterModel.FilterLinkCondition = FilterCondition.And;
        }

        _treeRn = BuildRowNodes();

        await Update();

        if (_blgHeader != null) _blgHeader.ActiveRender();
    }

    public List<RowNode<TItem>> GetSelectedNodes()
    {
        return _rowNodes.Where(e => e.IsSelected()).ToList();
    }

    public async Task SetRowDataAsync(List<TItem> gridData, int? totalItems = null, int? currentPage = null)
    {
        _nextId = 0;

        _gridData = gridData;

        _treeRn = BuildRowNodes();

        _rowNodes = FlattenTree(_treeRn, 0).FindAll(e => e.Show);

        if (GridOptions.EnableServerSidePagination && totalItems != null) _searchModel.PaginationModel.ItemsCount = (int)totalItems;

        if (GridOptions.EnableServerSidePagination && currentPage != null) _searchModel.PaginationModel.CurrentPage = (int)currentPage;

        _searchModel.PaginationModel.PageSize = GridOptions.PaginationPageSize;

        if (_gridData.Any()) OperationsByDefault();

        if (_blgHeader != null) _blgHeader.ActiveRender();

        if (_blgCenter is not null) _blgCenter.SelectallNotify(false);

        await Update();
    }

    public async Task SetColumnDefsAsync(List<GridColumn<TItem>> gridColumns)
    {
        if (GridColumns != null && GridColumns.Any()) _gridColumns = AdvancedFilteringService.InitAdvancedFilterModels(gridColumns, GridOptions.DefaultAdvancedFilterOperator);

        _pinnedRight = _gridColumns.Where(e => e.Pinned == Pinned.Right && !e.Hide).Any();

        _pinnedLeft = _gridColumns.Where(e => e.Pinned == Pinned.Left && !e.Hide).Any();

        if (_blgHeader != null) _blgHeader.ActiveRender();

        await InitializeGrid();

        StateHasChanged();
    }

    public List<AdvancedFilterModel> ConverToAdvancedFilter(List<FilterModel> filterModels)
    {
        var advancedFilterModels = new List<AdvancedFilterModel>();

        foreach (var filterModel in filterModels)
        {
            var filterOperator = filterModel.Type switch
            {
                CellDataType.Number => FilterOperator.Equals,
                CellDataType.Boolean => FilterOperator.Equals,
                _ => FilterOperator.Contains
            };

            var advancedFilterModel = new AdvancedFilterModel
                {
                    AdditionalOperator = FilterOperator.None,
                    AdditionalValue = null,
                    Column = filterModel.DataDield,
                    Condition = FilterCondition.None,
                    Operator = filterOperator,
                    Type = filterModel.Type,
                    Value = filterModel.Filter
                };

            advancedFilterModels.Add(advancedFilterModel);
        }

        return advancedFilterModels;
    }

    // Virtualization
    private async Task DefaultVirtualization()
    {
        _lastRenderedItemCount = 0;

        CalculateItemDistribution(0, 0, _containerSize, out var itemsBefore, out var visibleItemCapacity);

        UpdateItemDistribution(itemsBefore, visibleItemCapacity, true);

        await UpdateGridData();
    }

    private async Task UpdateGridData()
    {
        var lastItemIndex = Math.Min(_itemsBefore + _visibleItemCapacity, _itemCount);

        _itemsToShow = _loadedItems.Skip(_itemsBefore - _loadedItemsStartIndex)
                                   .Take(lastItemIndex - _loadedItemsStartIndex)
                                   .ToList();

        foreach (var rowNode in _itemsToShow)
            rowNode.First = false;

        if (_itemsToShow.Count > 0)
            _itemsToShow[0].First = true;

        _blgCenter?.ActiveRender();

        if (_pinnedLeft) _blgPinnedLeft?.ActiveRender();

        if (_pinnedRight) _blgPinnedRight?.ActiveRender();

        await InvokeAsync(StateHasChanged);

        _updatingGridData = false;
    }

    private string GetSpacerStyle(int itemsInSpacer) => $"height: {itemsInSpacer * _itemSize}px; width: {eBodyHorizontalScrollContainerWidth}px";

    async Task IVirtualizeJsCallbacks.OnBeforeSpacerVisible(float spacerSize, float spacerSeparation, float containerSize)
    {
        if (_previousHoverRowNode != null) _previousHoverRowNode.HoverThisNode(false);

        _updatingGridData = true;

        _containerSize = containerSize;

        CalculateItemDistribution(spacerSize, spacerSeparation, containerSize, out var itemsBefore, out var visibleItemCapacity);

        // Since we know the before spacer is now visible, we absolutely have to slide the window up
        // by at least one element. If we're not doing that, the previous item size info we had must
        // have been wrong, so just move along by one in that case to trigger an update and apply the
        // new size info.
        if (itemsBefore == _itemsBefore && itemsBefore > 0)
        {
            itemsBefore--;
        }

        UpdateItemDistribution(itemsBefore, visibleItemCapacity);

        await UpdateGridData();
    }

    async Task IVirtualizeJsCallbacks.OnAfterSpacerVisible(float spacerSize, float spacerSeparation, float containerSize)
    {
        if (_previousHoverRowNode != null) _previousHoverRowNode.HoverThisNode(false);

        _updatingGridData = true;

        _containerSize = containerSize;

        CalculateItemDistribution(spacerSize, spacerSeparation, containerSize, out var itemsAfter, out var visibleItemCapacity);

        var itemsBefore = Math.Max(0, _itemCount - itemsAfter - visibleItemCapacity);

        // Since we know the after spacer is now visible, we absolutely have to slide the window down
        // by at least one element. If we're not doing that, the previous item size info we had must
        // have been wrong, so just move along by one in that case to trigger an update and apply the
        // new size info.
        if (itemsBefore == _itemsBefore && itemsBefore > 0)
        {
            itemsBefore--;
        }

        UpdateItemDistribution(itemsBefore, visibleItemCapacity);

        await UpdateGridData();
    }

    private void CalculateItemDistribution(
        float spacerSize,
        float spacerSeparation,
        float containerSize,
        out int itemsInSpacer,
        out int visibleItemCapacity)
    {
        if (_lastRenderedItemCount > 0)
        {
            _itemSize = (spacerSeparation - (_lastRenderedPlaceholderCount * _itemSize)) / _lastRenderedItemCount;
        }

        if (_itemSize <= 0)
        {
            // At this point, something unusual has occurred, likely due to misuse of this component.
            // Reset the calculated item size to the user-provided item size.
            _itemSize = GridOptions.RowHeight;
        }

        itemsInSpacer = Math.Max(0, (int)Math.Floor(spacerSize / _itemSize) - 1 - OverscanCount);

        visibleItemCapacity = (int)Math.Ceiling(containerSize / _itemSize) + 2 * OverscanCount;
    }

    private void UpdateItemDistribution(int itemsBefore, int visibleItemCapacity, bool forceRefresh = false)
    {
        if (itemsBefore + visibleItemCapacity > _itemCount)
        {
            itemsBefore = Math.Max(0, _itemCount - visibleItemCapacity);
        }

        if (itemsBefore == _itemsBefore && visibleItemCapacity == _visibleItemCapacity && forceRefresh == false) return;

        _itemsBefore = itemsBefore;

        _visibleItemCapacity = visibleItemCapacity;

        var refreshTask = RefreshDataAsync();

        if (!refreshTask.IsCompleted)
        {
            StateHasChanged();
        }
    }

    private async Task RefreshDataAsync()
    {
        _refreshCts?.Cancel();

        _refreshCts = new CancellationTokenSource();

        var cancellationToken = _refreshCts.Token;

        var request = new ItemsProviderRequest(_itemsBefore, _visibleItemCapacity, cancellationToken);

        try
        {
            var result = await _itemsProvider(request);

            // Only apply result if the task was not canceled.
            if (!cancellationToken.IsCancellationRequested)
            {
                _itemCount = result.TotalItemCount;
                _loadedItems = result.Items;
                _loadedItemsStartIndex = request.StartIndex;
            }
        }
        catch (Exception e)
        {
            if (e is OperationCanceledException oce && oce.CancellationToken == cancellationToken)
            {
                // No-op; we canceled the operation, so it's fine to suppress this exception.
            }
            else
            {
                // Cache this exception so the renderer can throw it.
                _refreshException = e;
                StateHasChanged();
            }
        }
    }

    private ValueTask<ItemsProviderResult<RowNode<TItem>>> DefaultItemsProvider(ItemsProviderRequest request)
    {
        return ValueTask.FromResult(new ItemsProviderResult<RowNode<TItem>>(_renderedRowNodes!.Skip(request.StartIndex).Take(request.Count), _renderedRowNodes!.Count));
    }

    [JSInvokable]
    public async Task OnTouchMove(ScrollInfo scrollInfo)
    {
        var result = await BlGridInterop.GetElementScrollLeft(_eBodyHorizontalScrollViewport);

        _transformX = $"-{Math.Floor(result)}px";

        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        _refreshCts?.Cancel();

        if (_jsInterop != null)
        {
            await _jsInterop.DisposeAsync();
        }
    }

}